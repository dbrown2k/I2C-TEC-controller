
TEC_controler_A9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803e00  000004d0  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00803e16  00803e16  0000057a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ed4  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000191b  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000558  00000000  00000000  00004e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00005388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018c9  00000000  00000000  00005478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000492  00000000  00000000  00006d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000071d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	35 c0       	rjmp	.+106    	; 0x6e <__bad_interrupt>
   4:	34 c0       	rjmp	.+104    	; 0x6e <__bad_interrupt>
   6:	33 c0       	rjmp	.+102    	; 0x6e <__bad_interrupt>
   8:	32 c0       	rjmp	.+100    	; 0x6e <__bad_interrupt>
   a:	31 c0       	rjmp	.+98     	; 0x6e <__bad_interrupt>
   c:	30 c0       	rjmp	.+96     	; 0x6e <__bad_interrupt>
   e:	2f c0       	rjmp	.+94     	; 0x6e <__bad_interrupt>
  10:	2e c0       	rjmp	.+92     	; 0x6e <__bad_interrupt>
  12:	2d c0       	rjmp	.+90     	; 0x6e <__bad_interrupt>
  14:	1e c2       	rjmp	.+1084   	; 0x452 <__vector_10>
  16:	2b c0       	rjmp	.+86     	; 0x6e <__bad_interrupt>
  18:	2a c0       	rjmp	.+84     	; 0x6e <__bad_interrupt>
  1a:	29 c0       	rjmp	.+82     	; 0x6e <__bad_interrupt>
  1c:	28 c0       	rjmp	.+80     	; 0x6e <__bad_interrupt>
  1e:	27 c0       	rjmp	.+78     	; 0x6e <__bad_interrupt>
  20:	26 c0       	rjmp	.+76     	; 0x6e <__bad_interrupt>
  22:	25 c0       	rjmp	.+74     	; 0x6e <__bad_interrupt>
  24:	24 c0       	rjmp	.+72     	; 0x6e <__bad_interrupt>
  26:	23 c0       	rjmp	.+70     	; 0x6e <__bad_interrupt>
  28:	22 c0       	rjmp	.+68     	; 0x6e <__bad_interrupt>
  2a:	21 c0       	rjmp	.+66     	; 0x6e <__bad_interrupt>
  2c:	20 c0       	rjmp	.+64     	; 0x6e <__bad_interrupt>
  2e:	1f c0       	rjmp	.+62     	; 0x6e <__bad_interrupt>
  30:	1e c0       	rjmp	.+60     	; 0x6e <__bad_interrupt>
  32:	1d c0       	rjmp	.+58     	; 0x6e <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e0 ed       	ldi	r30, 0xD0	; 208
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 31       	cpi	r26, 0x16	; 22
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a6 e1       	ldi	r26, 0x16	; 22
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 31       	cpi	r26, 0x1E	; 30
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	0e 94 83 00 	call	0x106	; 0x106 <main>
  6a:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_exit>

0000006e <__bad_interrupt>:
  6e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000072 <_Z6getADCh>:
float ADCtoAmp(uint16_t adc)
{
	//convert to Volts
	float result = ((adc*0.00423828)-1.25)*2; //(x-(0.5*2.5v))/(25*0.02Ohms) >> (x-1.25)*2
	return result;
}
  72:	e0 e0       	ldi	r30, 0x00	; 0
  74:	f6 e0       	ldi	r31, 0x06	; 6
  76:	90 85       	ldd	r25, Z+8	; 0x08
  78:	90 fd       	sbrc	r25, 0
  7a:	fd cf       	rjmp	.-6      	; 0x76 <_Z6getADCh+0x4>
  7c:	e0 e0       	ldi	r30, 0x00	; 0
  7e:	f6 e0       	ldi	r31, 0x06	; 6
  80:	86 83       	std	Z+6, r24	; 0x06
  82:	80 85       	ldd	r24, Z+8	; 0x08
  84:	81 60       	ori	r24, 0x01	; 1
  86:	80 87       	std	Z+8, r24	; 0x08
  88:	80 85       	ldd	r24, Z+8	; 0x08
  8a:	80 fd       	sbrc	r24, 0
  8c:	fd cf       	rjmp	.-6      	; 0x88 <_Z6getADCh+0x16>
  8e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
  92:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
  96:	96 95       	lsr	r25
  98:	87 95       	ror	r24
  9a:	96 95       	lsr	r25
  9c:	87 95       	ror	r24
  9e:	96 95       	lsr	r25
  a0:	87 95       	ror	r24
  a2:	08 95       	ret

000000a4 <_Z11sendSPIBytehhh>:

//send 24bit string to DAC
void sendSPIByte(uint8_t byte0, uint8_t byte1, uint8_t byte2)
{
	//lower SS - start transmit
	PORTC.OUTCLR = SS; //set SS low (active low)
  a4:	98 e0       	ldi	r25, 0x08	; 8
  a6:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>


//regularly used function to send byte to SPI
static inline uint8_t spi(uint8_t c) //static inline - suggestion to compiler to optimize
{
	SPI0.DATA = c;
  aa:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
	while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);
  ae:	e0 e2       	ldi	r30, 0x20	; 32
  b0:	f8 e0       	ldi	r31, 0x08	; 8
  b2:	83 81       	ldd	r24, Z+3	; 0x03
  b4:	88 23       	and	r24, r24
  b6:	ec f7       	brge	.-6      	; 0xb2 <_Z11sendSPIBytehhh+0xe>
	return SPI0.DATA;
  b8:	e0 e2       	ldi	r30, 0x20	; 32
  ba:	f8 e0       	ldi	r31, 0x08	; 8
  bc:	84 81       	ldd	r24, Z+4	; 0x04


//regularly used function to send byte to SPI
static inline uint8_t spi(uint8_t c) //static inline - suggestion to compiler to optimize
{
	SPI0.DATA = c;
  be:	64 83       	std	Z+4, r22	; 0x04
	while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);
  c0:	83 81       	ldd	r24, Z+3	; 0x03
  c2:	88 23       	and	r24, r24
  c4:	ec f7       	brge	.-6      	; 0xc0 <_Z11sendSPIBytehhh+0x1c>
	return SPI0.DATA;
  c6:	e0 e2       	ldi	r30, 0x20	; 32
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	84 81       	ldd	r24, Z+4	; 0x04


//regularly used function to send byte to SPI
static inline uint8_t spi(uint8_t c) //static inline - suggestion to compiler to optimize
{
	SPI0.DATA = c;
  cc:	44 83       	std	Z+4, r20	; 0x04
	while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);
  ce:	83 81       	ldd	r24, Z+3	; 0x03
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <_Z11sendSPIBytehhh+0x2a>
	return SPI0.DATA;
  d4:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
	//load data
	spi(byte0);
	spi(byte1);
	spi(byte2);
	//raise SS - END of transmit
	PORTC.OUTSET = SS; //set SS high (active low)
  d8:	88 e0       	ldi	r24, 0x08	; 8
  da:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x700445>
  de:	08 95       	ret

000000e0 <_Z7initClkv>:
{
	/*interval timer is set using the master clock divider/prescaler and then setting
	the value at which the clock is compared. if the values match then the interrupt
	is triggered and the clock and interrupt flags are re-set*/ 
	//select clock divider 1/64 on 16bit clock
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV64_gc; // 20MHz / 64 = 312.5kHz
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	fa e0       	ldi	r31, 0x0A	; 10
  e4:	8a e0       	ldi	r24, 0x0A	; 10
  e6:	80 83       	st	Z, r24
	//clear overflow flags
	TCA0.SINGLE.INTFLAGS = 0;
  e8:	13 86       	std	Z+11, r1	; 0x0b
	//enable compare channel 0
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;
  ea:	82 85       	ldd	r24, Z+10	; 0x0a
  ec:	80 61       	ori	r24, 0x10	; 16
  ee:	82 87       	std	Z+10, r24	; 0x0a
	//set compare value - trigger value for interrupt reading 11th bit (10bits rollover) (305Hz)
	TCA0.SINGLE.CMP0 = 0b0010000000000000;
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e2       	ldi	r25, 0x20	; 32
  f4:	80 a7       	std	Z+40, r24	; 0x28
  f6:	91 a7       	std	Z+41, r25	; 0x29
	//enable overflow interrupt ctrl
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_OVF_bm;
  f8:	82 85       	ldd	r24, Z+10	; 0x0a
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	82 87       	std	Z+10, r24	; 0x0a
	//enable timer
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
  fe:	80 81       	ld	r24, Z
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <main>:
	// 7 6 5 4 3 2 1 RESET
	// 5 = Thermistor (input)
	// 3 = TEC current (input)
	// 2 = TEC voltage (input)
	// 1 = DAC CLR (Active low) (output)
	PORTA.DIRSET = CLR;
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b4 e0       	ldi	r27, 0x04	; 4
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	8c 93       	st	X, r24
 110:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUTSET = CLR; //portA pin 1 = high 
 112:	15 96       	adiw	r26, 0x05	; 5
 114:	8c 93       	st	X, r24
 116:	15 97       	sbiw	r26, 0x05	; 5

	//TINY - setup port B (1 = output)
	// 7 6 5 4 RX TX SDA SCL
	// 5 = shut down (output)
	// 4 = temp good (input)
	PORTB.DIRSET = enTEC;
 118:	c0 e2       	ldi	r28, 0x20	; 32
 11a:	d4 e0       	ldi	r29, 0x04	; 4
 11c:	10 e2       	ldi	r17, 0x20	; 32
 11e:	19 83       	std	Y+1, r17	; 0x01
	PORTB.OUTCLR = enTEC; //set enable TEC to low /off at startup
 120:	1e 83       	std	Y+6, r17	; 0x06


	//TINY - setup SPI MAX5713 (max 50MHz)
	PORTMUX.CTRLB = PORTMUX_SPI0_ALTERNATE_gc; //SPI1 pins so switch MUX
 122:	94 e0       	ldi	r25, 0x04	; 4
 124:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
	//SPI - configure SCK, MOSI, SS pins to output
	PORTC.DIRSET = SCK | MOSI | SS;
 128:	e0 e4       	ldi	r30, 0x40	; 64
 12a:	f4 e0       	ldi	r31, 0x04	; 4
 12c:	9d e0       	ldi	r25, 0x0D	; 13
 12e:	91 83       	std	Z+1, r25	; 0x01
	//SPI - set SS high (active low)
	PORTC.OUTSET = SS;
 130:	98 e0       	ldi	r25, 0x08	; 8
 132:	95 83       	std	Z+5, r25	; 0x05
	//SPI - select SPI as master
	SPI0.CTRLA |= SPI_MASTER_bm;
 134:	e0 e2       	ldi	r30, 0x20	; 32
 136:	f8 e0       	ldi	r31, 0x08	; 8
 138:	90 81       	ld	r25, Z
 13a:	90 62       	ori	r25, 0x20	; 32
 13c:	90 83       	st	Z, r25
	//SPI - SPI Mode 0
	SPI0.CTRLB |= SPI_MODE_0_gc;
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	91 83       	std	Z+1, r25	; 0x01
	//SPI - select the clock speed prescaler 64
	SPI0.CTRLA |= SPI_PRESC_DIV64_gc;
 142:	90 81       	ld	r25, Z
 144:	94 60       	ori	r25, 0x04	; 4
 146:	90 83       	st	Z, r25
	//SPI - Slave Select Disable
	SPI0.CTRLB |= SPI_SSD_bm;
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	94 60       	ori	r25, 0x04	; 4
 14c:	91 83       	std	Z+1, r25	; 0x01
	//SPI - enable SPI
	SPI0.CTRLA |= SPI_ENABLE_bm;
 14e:	90 81       	ld	r25, Z
 150:	91 60       	ori	r25, 0x01	; 1
 152:	90 83       	st	Z, r25
	
	
	//better to set the DAC up each time rather than try and rely on EEPROM settings
	PORTA.OUTCLR = CLR; //portA pin 1 = low
 154:	16 96       	adiw	r26, 0x06	; 6
 156:	8c 93       	st	X, r24
 158:	16 97       	sbiw	r26, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	e7 e8       	ldi	r30, 0x87	; 135
 15c:	f3 e1       	ldi	r31, 0x13	; 19
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x58>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x5e>
 164:	00 00       	nop
	_delay_ms(1);
	PORTA.OUTSET = CLR; //portA pin 1 = high
 166:	15 96       	adiw	r26, 0x05	; 5
 168:	8c 93       	st	X, r24
	//DAC - setup with initial outputs
	//CONFIG = all DACs, latch is transparent
	sendSPIByte(0b01101001, 0b00001111, 0x00);
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	6f e0       	ldi	r22, 0x0F	; 15
 16e:	89 e6       	ldi	r24, 0x69	; 105
 170:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z11sendSPIBytehhh>
	//DAC - setup REF to external
	//REF = 0b01110000; //last two bytes are zeros
	sendSPIByte(0b01110000, 0x00, 0x00);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	80 e7       	ldi	r24, 0x70	; 112
 17a:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z11sendSPIBytehhh>
	//DAC - set vControl
	//shift 16bit value right to get high byte, shift left 4 bits to get low byte
	//DAC A - set output TEC
	sendSPIByte(dacA, (uint8_t)(vControl >> 2), (uint8_t)(vControl << 6));
 17e:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <vControl>
 182:	90 91 14 3e 	lds	r25, 0x3E14	; 0x803e14 <vControl+0x1>
 186:	60 91 13 3e 	lds	r22, 0x3E13	; 0x803e13 <vControl>
 18a:	70 91 14 3e 	lds	r23, 0x3E14	; 0x803e14 <vControl+0x1>
 18e:	48 2f       	mov	r20, r24
 190:	42 95       	swap	r20
 192:	44 0f       	add	r20, r20
 194:	44 0f       	add	r20, r20
 196:	40 7c       	andi	r20, 0xC0	; 192
 198:	76 95       	lsr	r23
 19a:	67 95       	ror	r22
 19c:	76 95       	lsr	r23
 19e:	67 95       	ror	r22
 1a0:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <dacA>
 1a4:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z11sendSPIBytehhh>
	//DAC B - set iLimHeat
	sendSPIByte(dacB, (uint8_t)(iLimHeat >> 2), (uint8_t)(iLimHeat << 6));
 1a8:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <iLimHeat>
 1ac:	90 91 10 3e 	lds	r25, 0x3E10	; 0x803e10 <iLimHeat+0x1>
 1b0:	60 91 0f 3e 	lds	r22, 0x3E0F	; 0x803e0f <iLimHeat>
 1b4:	70 91 10 3e 	lds	r23, 0x3E10	; 0x803e10 <iLimHeat+0x1>
 1b8:	48 2f       	mov	r20, r24
 1ba:	42 95       	swap	r20
 1bc:	44 0f       	add	r20, r20
 1be:	44 0f       	add	r20, r20
 1c0:	40 7c       	andi	r20, 0xC0	; 192
 1c2:	76 95       	lsr	r23
 1c4:	67 95       	ror	r22
 1c6:	76 95       	lsr	r23
 1c8:	67 95       	ror	r22
 1ca:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <dacB>
 1ce:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z11sendSPIBytehhh>
	//DAC C - set vLim
	sendSPIByte(dacC, (uint8_t)(vLim >> 2), (uint8_t)(vLim << 6));
 1d2:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <vLim>
 1d6:	90 91 0e 3e 	lds	r25, 0x3E0E	; 0x803e0e <vLim+0x1>
 1da:	60 91 0d 3e 	lds	r22, 0x3E0D	; 0x803e0d <vLim>
 1de:	70 91 0e 3e 	lds	r23, 0x3E0E	; 0x803e0e <vLim+0x1>
 1e2:	48 2f       	mov	r20, r24
 1e4:	42 95       	swap	r20
 1e6:	44 0f       	add	r20, r20
 1e8:	44 0f       	add	r20, r20
 1ea:	40 7c       	andi	r20, 0xC0	; 192
 1ec:	76 95       	lsr	r23
 1ee:	67 95       	ror	r22
 1f0:	76 95       	lsr	r23
 1f2:	67 95       	ror	r22
 1f4:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <dacC>
 1f8:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z11sendSPIBytehhh>
	//DAC D - set iLimCool
	sendSPIByte(dacD, (uint8_t)(iLimCool >> 2), (uint8_t)(iLimCool << 6));
 1fc:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <iLimCool>
 200:	90 91 12 3e 	lds	r25, 0x3E12	; 0x803e12 <iLimCool+0x1>
 204:	60 91 11 3e 	lds	r22, 0x3E11	; 0x803e11 <iLimCool>
 208:	70 91 12 3e 	lds	r23, 0x3E12	; 0x803e12 <iLimCool+0x1>
 20c:	48 2f       	mov	r20, r24
 20e:	42 95       	swap	r20
 210:	44 0f       	add	r20, r20
 212:	44 0f       	add	r20, r20
 214:	40 7c       	andi	r20, 0xC0	; 192
 216:	76 95       	lsr	r23
 218:	67 95       	ror	r22
 21a:	76 95       	lsr	r23
 21c:	67 95       	ror	r22
 21e:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
 222:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z11sendSPIBytehhh>
	
	
	
	//TINY - setup ADC
	//VREF - setup voltage reference to 2.5V
	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;
 226:	e0 ea       	ldi	r30, 0xA0	; 160
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 62       	ori	r24, 0x20	; 32
 22e:	80 83       	st	Z, r24
	//VREF - enable ADC ref
	VREF.CTRLB |= VREF_ADC0REFEN_bm;
 230:	81 81       	ldd	r24, Z+1	; 0x01
 232:	82 60       	ori	r24, 0x02	; 2
 234:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select resolution 10bit
	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;
 236:	e0 e0       	ldi	r30, 0x00	; 0
 238:	f6 e0       	ldi	r31, 0x06	; 6
 23a:	80 81       	ld	r24, Z
 23c:	80 83       	st	Z, r24
	//ADC - number of convertions accumulated per measurement
	ADC0.CTRLB |= ADC_SAMPNUM_ACC8_gc; //update temp conversion if changing number of samples
 23e:	81 81       	ldd	r24, Z+1	; 0x01
 240:	83 60       	ori	r24, 0x03	; 3
 242:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select reference
	ADC0.CTRLC |= ADC_REFSEL_INTREF_gc;
 244:	82 81       	ldd	r24, Z+2	; 0x02
 246:	82 83       	std	Z+2, r24	; 0x02
	//ADC - sampling rate pre-scaler ~1.25MHz
	ADC0.CTRLC |= ADC_PRESC_DIV16_gc;
 248:	82 81       	ldd	r24, Z+2	; 0x02
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	82 83       	std	Z+2, r24	; 0x02
	//ADC - initial input PA5 / AIN5
	ADC0.MUXPOS |= ADC_MUXPOS_AIN5_gc;
 24e:	86 81       	ldd	r24, Z+6	; 0x06
 250:	85 60       	ori	r24, 0x05	; 5
 252:	86 83       	std	Z+6, r24	; 0x06
	//ADC - enable start event (start measuring on enable)
	ADC0.EVCTRL |= ADC_STARTEI_bm;
 254:	81 85       	ldd	r24, Z+9	; 0x09
 256:	81 60       	ori	r24, 0x01	; 1
 258:	81 87       	std	Z+9, r24	; 0x09
	//ADC - enable ADC (ready for measurement trigger)
	ADC0.CTRLA |= ADC_ENABLE_bm;
 25a:	80 81       	ld	r24, Z
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	80 83       	st	Z, r24
	


	//TINY  - setup I2C Slave
	//I2C - enable slave
	TWI0.SCTRLA |= TWI_AP_ADR_gc;
 260:	e0 e1       	ldi	r30, 0x10	; 16
 262:	f8 e0       	ldi	r31, 0x08	; 8
 264:	81 85       	ldd	r24, Z+9	; 0x09
 266:	81 60       	ori	r24, 0x01	; 1
 268:	81 87       	std	Z+9, r24	; 0x09
	//I2C - set address
	TWI0.SADDR |= 0b00111110;
 26a:	84 85       	ldd	r24, Z+12	; 0x0c
 26c:	8e 63       	ori	r24, 0x3E	; 62
 26e:	84 87       	std	Z+12, r24	; 0x0c
	//load PID settings from EEPROM
	
	
	
	//initialise clock & enable interrupts
	initClk();
 270:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z7initClkv>
	sei();
 274:	78 94       	sei
	
	PORTB.OUTSET = enTEC; //enable TEC
 276:	1d 83       	std	Y+5, r17	; 0x05
 278:	ff e7       	ldi	r31, 0x7F	; 127
 27a:	2a e1       	ldi	r18, 0x1A	; 26
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	f1 50       	subi	r31, 0x01	; 1
 280:	20 40       	sbci	r18, 0x00	; 0
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x178>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x182>
 288:	00 00       	nop
 28a:	f6 cf       	rjmp	.-20     	; 0x278 <main+0x172>

0000028c <_Z7calcPIDv>:
}


//PID controller
void calcPID()
{
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
	int32_t i_term;
	int32_t temp;

	
	//calculate error
	error = setTemp - currTemp; // +/-ve value
 294:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <setTemp>
 298:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <setTemp+0x1>
 29c:	20 91 1c 3e 	lds	r18, 0x3E1C	; 0x803e1c <currTemp>
 2a0:	30 91 1d 3e 	lds	r19, 0x3E1D	; 0x803e1d <currTemp+0x1>
 2a4:	82 1b       	sub	r24, r18
 2a6:	93 0b       	sbc	r25, r19
	
	// Calculate Pterm and limit error overflow
	if (error > 511) //positive limit
 2a8:	81 15       	cp	r24, r1
 2aa:	22 e0       	ldi	r18, 0x02	; 2
 2ac:	92 07       	cpc	r25, r18
 2ae:	a4 f4       	brge	.+40     	; 0x2d8 <_Z7calcPIDv+0x4c>
	{
		p_term = 511;
	}
	else if (error < -511) //negative limit
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	2e ef       	ldi	r18, 0xFE	; 254
 2b4:	92 07       	cpc	r25, r18
 2b6:	b4 f0       	brlt	.+44     	; 0x2e4 <_Z7calcPIDv+0x58>
	{
		p_term = -511;
	}
	else
	{
		p_term = P_Factor * error;
 2b8:	20 91 09 3e 	lds	r18, 0x3E09	; 0x803e09 <P_Factor>
 2bc:	30 91 0a 3e 	lds	r19, 0x3E0A	; 0x803e0a <P_Factor+0x1>
 2c0:	28 9f       	mul	r18, r24
 2c2:	60 01       	movw	r12, r0
 2c4:	29 9f       	mul	r18, r25
 2c6:	d0 0c       	add	r13, r0
 2c8:	38 9f       	mul	r19, r24
 2ca:	d0 0c       	add	r13, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	0d 2c       	mov	r0, r13
 2d0:	00 0c       	add	r0, r0
 2d2:	ee 08       	sbc	r14, r14
 2d4:	ff 08       	sbc	r15, r15
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <_Z7calcPIDv+0x6a>
	error = setTemp - currTemp; // +/-ve value
	
	// Calculate Pterm and limit error overflow
	if (error > 511) //positive limit
	{
		p_term = 511;
 2d8:	c1 2c       	mov	r12, r1
 2da:	d1 2c       	mov	r13, r1
 2dc:	76 01       	movw	r14, r12
 2de:	ca 94       	dec	r12
 2e0:	d3 94       	inc	r13
 2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <_Z7calcPIDv+0x6a>
	}
	else if (error < -511) //negative limit
	{
		p_term = -511;
 2e4:	0f 2e       	mov	r0, r31
 2e6:	cc 24       	eor	r12, r12
 2e8:	c3 94       	inc	r12
 2ea:	fe ef       	ldi	r31, 0xFE	; 254
 2ec:	df 2e       	mov	r13, r31
 2ee:	ee 24       	eor	r14, r14
 2f0:	ea 94       	dec	r14
 2f2:	fe 2c       	mov	r15, r14
 2f4:	f0 2d       	mov	r31, r0
	{
		p_term = P_Factor * error;
	}

	// Calculate Iterm and limit integral runaway
	temp = sumError + error;
 2f6:	20 91 18 3e 	lds	r18, 0x3E18	; 0x803e18 <sumError>
 2fa:	30 91 19 3e 	lds	r19, 0x3E19	; 0x803e19 <sumError+0x1>
 2fe:	82 0f       	add	r24, r18
 300:	93 1f       	adc	r25, r19
 302:	ac 01       	movw	r20, r24
 304:	09 2e       	mov	r0, r25
 306:	00 0c       	add	r0, r0
 308:	66 0b       	sbc	r22, r22
 30a:	77 0b       	sbc	r23, r23
	if (temp > 511)
 30c:	41 15       	cp	r20, r1
 30e:	22 e0       	ldi	r18, 0x02	; 2
 310:	52 07       	cpc	r21, r18
 312:	61 05       	cpc	r22, r1
 314:	71 05       	cpc	r23, r1
 316:	5c f0       	brlt	.+22     	; 0x32e <_Z7calcPIDv+0xa2>
	{
		i_term = 511;
		sumError = 511;
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <sumError>
 320:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <sumError+0x1>

	// Calculate Iterm and limit integral runaway
	temp = sumError + error;
	if (temp > 511)
	{
		i_term = 511;
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	a0 e0       	ldi	r26, 0x00	; 0
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	27 c0       	rjmp	.+78     	; 0x37c <_Z7calcPIDv+0xf0>
		sumError = 511;
	} 
	else if (temp < -511)
 32e:	41 30       	cpi	r20, 0x01	; 1
 330:	5e 4f       	sbci	r21, 0xFE	; 254
 332:	6f 4f       	sbci	r22, 0xFF	; 255
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	5c f4       	brge	.+22     	; 0x34e <_Z7calcPIDv+0xc2>
	{
		i_term = -511;
		sumError = -511;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	9e ef       	ldi	r25, 0xFE	; 254
 33c:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <sumError>
 340:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <sumError+0x1>
		i_term = 511;
		sumError = 511;
	} 
	else if (temp < -511)
	{
		i_term = -511;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	9e ef       	ldi	r25, 0xFE	; 254
 348:	af ef       	ldi	r26, 0xFF	; 255
 34a:	bf ef       	ldi	r27, 0xFF	; 255
 34c:	17 c0       	rjmp	.+46     	; 0x37c <_Z7calcPIDv+0xf0>
		sumError = -511;
	}
	else
	{
		sumError = temp;
 34e:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <sumError>
 352:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <sumError+0x1>
		i_term = I_Factor * sumError;
 356:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <I_Factor>
 35a:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <I_Factor+0x1>
 35e:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <sumError>
 362:	90 91 19 3e 	lds	r25, 0x3E19	; 0x803e19 <sumError+0x1>
 366:	48 9f       	mul	r20, r24
 368:	90 01       	movw	r18, r0
 36a:	49 9f       	mul	r20, r25
 36c:	30 0d       	add	r19, r0
 36e:	58 9f       	mul	r21, r24
 370:	30 0d       	add	r19, r0
 372:	11 24       	eor	r1, r1
 374:	c9 01       	movw	r24, r18
 376:	33 0f       	add	r19, r19
 378:	aa 0b       	sbc	r26, r26
 37a:	bb 0b       	sbc	r27, r27
	}

	// Calculate Dterm
	d_term = (D_Factor * (lastProcessValue - vControl))/128;
 37c:	40 91 1a 3e 	lds	r20, 0x3E1A	; 0x803e1a <lastProcessValue>
 380:	50 91 1b 3e 	lds	r21, 0x3E1B	; 0x803e1b <lastProcessValue+0x1>
 384:	20 91 13 3e 	lds	r18, 0x3E13	; 0x803e13 <vControl>
 388:	30 91 14 3e 	lds	r19, 0x3E14	; 0x803e14 <vControl+0x1>
 38c:	60 91 05 3e 	lds	r22, 0x3E05	; 0x803e05 <D_Factor>
 390:	70 91 06 3e 	lds	r23, 0x3E06	; 0x803e06 <D_Factor+0x1>
	
	lastProcessValue = vControl;
 394:	e0 91 13 3e 	lds	r30, 0x3E13	; 0x803e13 <vControl>
 398:	f0 91 14 3e 	lds	r31, 0x3E14	; 0x803e14 <vControl+0x1>
 39c:	e0 93 1a 3e 	sts	0x3E1A, r30	; 0x803e1a <lastProcessValue>
 3a0:	f0 93 1b 3e 	sts	0x3E1B, r31	; 0x803e1b <lastProcessValue+0x1>
	
	temp = 511 - ((p_term + i_term + d_term)/256); //nominal mid point, use temp as signed holder
 3a4:	8c 0d       	add	r24, r12
 3a6:	9d 1d       	adc	r25, r13
 3a8:	ae 1d       	adc	r26, r14
 3aa:	bf 1d       	adc	r27, r15
		sumError = temp;
		i_term = I_Factor * sumError;
	}

	// Calculate Dterm
	d_term = (D_Factor * (lastProcessValue - vControl))/128;
 3ac:	42 1b       	sub	r20, r18
 3ae:	53 0b       	sbc	r21, r19
 3b0:	46 9f       	mul	r20, r22
 3b2:	90 01       	movw	r18, r0
 3b4:	47 9f       	mul	r20, r23
 3b6:	30 0d       	add	r19, r0
 3b8:	56 9f       	mul	r21, r22
 3ba:	30 0d       	add	r19, r0
 3bc:	11 24       	eor	r1, r1
 3be:	22 0f       	add	r18, r18
 3c0:	23 2f       	mov	r18, r19
 3c2:	22 1f       	adc	r18, r18
 3c4:	33 0b       	sbc	r19, r19
 3c6:	31 95       	neg	r19
	
	lastProcessValue = vControl;
	
	temp = 511 - ((p_term + i_term + d_term)/256); //nominal mid point, use temp as signed holder
 3c8:	82 0f       	add	r24, r18
 3ca:	93 1f       	adc	r25, r19
 3cc:	a1 1d       	adc	r26, r1
 3ce:	b1 1d       	adc	r27, r1
 3d0:	ac 01       	movw	r20, r24
 3d2:	bd 01       	movw	r22, r26
 3d4:	bb 23       	and	r27, r27
 3d6:	24 f4       	brge	.+8      	; 0x3e0 <_Z7calcPIDv+0x154>
 3d8:	41 50       	subi	r20, 0x01	; 1
 3da:	5f 4f       	sbci	r21, 0xFF	; 255
 3dc:	6f 4f       	sbci	r22, 0xFF	; 255
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	45 2f       	mov	r20, r21
 3e2:	56 2f       	mov	r21, r22
 3e4:	67 2f       	mov	r22, r23
 3e6:	77 27       	eor	r23, r23
 3e8:	67 fd       	sbrc	r22, 7
 3ea:	7a 95       	dec	r23
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	a0 e0       	ldi	r26, 0x00	; 0
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	84 1b       	sub	r24, r20
 3f6:	95 0b       	sbc	r25, r21
 3f8:	a6 0b       	sbc	r26, r22
 3fa:	b7 0b       	sbc	r27, r23
 3fc:	1a f4       	brpl	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	dc 01       	movw	r26, r24
 404:	81 15       	cp	r24, r1
 406:	24 e0       	ldi	r18, 0x04	; 4
 408:	92 07       	cpc	r25, r18
 40a:	a1 05       	cpc	r26, r1
 40c:	b1 05       	cpc	r27, r1
 40e:	24 f0       	brlt	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	93 e0       	ldi	r25, 0x03	; 3
 414:	a0 e0       	ldi	r26, 0x00	; 0
 416:	b0 e0       	ldi	r27, 0x00	; 0
	else if (temp < 0)
	{
		temp = 0;
	}
	
	vControl = temp; 
 418:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <vControl>
 41c:	90 93 14 3e 	sts	0x3E14, r25	; 0x803e14 <vControl+0x1>
	
	//set new value
	//DAC A - set output TEC
	sendSPIByte(dacA, (uint8_t)(vControl >> 2), (uint8_t)(vControl << 6));
 420:	40 91 13 3e 	lds	r20, 0x3E13	; 0x803e13 <vControl>
 424:	50 91 14 3e 	lds	r21, 0x3E14	; 0x803e14 <vControl+0x1>
 428:	60 91 13 3e 	lds	r22, 0x3E13	; 0x803e13 <vControl>
 42c:	70 91 14 3e 	lds	r23, 0x3E14	; 0x803e14 <vControl+0x1>
 430:	42 95       	swap	r20
 432:	44 0f       	add	r20, r20
 434:	44 0f       	add	r20, r20
 436:	40 7c       	andi	r20, 0xC0	; 192
 438:	76 95       	lsr	r23
 43a:	67 95       	ror	r22
 43c:	76 95       	lsr	r23
 43e:	67 95       	ror	r22
 440:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <dacA>
 444:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z11sendSPIBytehhh>
	//update previous values

}
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	08 95       	ret

00000452 <__vector_10>:
#define SS PIN3_bm //PC3 - SS (active low)


//Read ADC on clock interrupt when triggered by compare value 0
ISR (TCA0_CMP0_vect)
{
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	2f 93       	push	r18
 45e:	3f 93       	push	r19
 460:	4f 93       	push	r20
 462:	5f 93       	push	r21
 464:	6f 93       	push	r22
 466:	7f 93       	push	r23
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	af 93       	push	r26
 46e:	bf 93       	push	r27
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31
	//clear overflow flags
	TCA0.SINGLE.INTFLAGS = 0;
 474:	e0 e0       	ldi	r30, 0x00	; 0
 476:	fa e0       	ldi	r31, 0x0A	; 10
 478:	13 86       	std	Z+11, r1	; 0x0b
	//restart counter
	TCA0.SINGLE.CTRLESET |= TCA_SINGLE_CMD_RESTART_gc;
 47a:	85 81       	ldd	r24, Z+5	; 0x05
 47c:	88 60       	ori	r24, 0x08	; 8
 47e:	85 83       	std	Z+5, r24	; 0x05
	//read ADC
	currTemp = getADC(ADC_K);  
 480:	85 e0       	ldi	r24, 0x05	; 5
 482:	0e 94 39 00 	call	0x72	; 0x72 <_Z6getADCh>
 486:	80 93 1c 3e 	sts	0x3E1C, r24	; 0x803e1c <currTemp>
 48a:	90 93 1d 3e 	sts	0x3E1D, r25	; 0x803e1d <currTemp+0x1>
	//calc PID if enabled
	if (enPID != 0)
 48e:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <enPID>
 492:	81 11       	cpse	r24, r1
	{
		calcPID();
 494:	0e 94 46 01 	call	0x28c	; 0x28c <_Z7calcPIDv>
	}
	count++; //increment general counter/timer
 498:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <__data_end>
 49c:	90 91 17 3e 	lds	r25, 0x3E17	; 0x803e17 <__data_end+0x1>
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <__data_end>
 4a6:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <__data_end+0x1>
}
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	bf 91       	pop	r27
 4b0:	af 91       	pop	r26
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	7f 91       	pop	r23
 4b8:	6f 91       	pop	r22
 4ba:	5f 91       	pop	r21
 4bc:	4f 91       	pop	r20
 4be:	3f 91       	pop	r19
 4c0:	2f 91       	pop	r18
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <_exit>:
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
